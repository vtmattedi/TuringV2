// Include the libraries we need
#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 33

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

// arrays to hold device address
DeviceAddress insideThermometer,dog;

// function to print a device address
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    if (deviceAddress[i] < 16)
      Serial.print("0");
    Serial.print(deviceAddress[i], HEX);
  }
}
void printTemperature(DeviceAddress deviceAddress)
{
  // method 1 - slower
  // Serial.print("Temp C: ");
  // Serial.print(sensors.getTempC(deviceAddress));
  // Serial.print(" Temp F: ");
  // Serial.print(sensors.getTempF(deviceAddress)); // Makes a second call to getTempC and then converts to Fahrenheit

  // method 2 - faster
  float tempC = sensors.getTempC(deviceAddress);
  if (tempC == DEVICE_DISCONNECTED_C)
  {
    Serial.println("Error: Could not read temperature data");
    return;
  }
  Serial.print("Temp C: ");
  Serial.print(tempC);
  Serial.print(" Temp F: ");
  Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
}

void printTemperatureIndex(int index)
{
  // method 2 - faster
  float tempC = sensors.getTempCByIndex(index);
  if (tempC == DEVICE_DISCONNECTED_C)
  {
    Serial.println("Error: Could not read temperature data");
    return;
  }
  Serial.print("Temp C: ");
  Serial.print(tempC);
  Serial.print(" Temp F: ");
  Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
}
void doONCE()
{

  sensors.requestTemperatures(); // Send the command to get temperatures
  Serial.println("DONE");

  // It responds almost immediately. Let's print out the data
  printTemperature(0);
  delay(1000);
}
void setMux(int port)
{
  if (port > 15 || port < 0)
  return;
  bool pins[4];
  for (int i = 0; i < 4; i++)
  {
    pins[i] = port & (1 << i); // Check the value of each bit in the byte
  }
  digitalWrite(17, pins[0]);
  digitalWrite(16, pins[1]);
  digitalWrite(18, pins[2]);
  digitalWrite(19, pins[3]);
analogRead(33);
pinMode(33, INPUT);
Serial.printf("mux: %d\n",port);
}
/*
 * Setup function. Here we do the basics
 */
void setup(void)
{
  // start serial port
  Serial.begin(115200);
  Serial.println("Dallas Temperature IC Control Library Demo");
  for (size_t i = 0; i < 4; i++)
  {
    pinMode(16 + i, OUTPUT);
  }
  pinMode(25, OUTPUT);
  pinMode(33, INPUT);
  digitalWrite(17, 0);
  digitalWrite(16, 1);
  digitalWrite(18, 0);
  digitalWrite(19, 1);
  digitalWrite(25, LOW);

  Serial.print("Locating devices...");
  sensors.begin();
  Serial.print("Found ");
  Serial.print(sensors.getDeviceCount(), DEC);
  Serial.println(" devices.");

  // report parasite power requirements
  Serial.print("Parasite power is: ");
  if (sensors.isParasitePowerMode())
    Serial.println("ON");
  else
    Serial.println("OFF");

  // Assign address manually. The addresses below will beed to be changed
  // to valid device addresses on your bus. Device address can be retrieved
  // by using either oneWire.search(deviceAddress) or individually via
  // sensors.getAddress(deviceAddress, index)
  // Note that you will need to use your specific address here
  // insideThermometer = { 0x28, 0x1D, 0x39, 0x31, 0x2, 0x0, 0x0, 0xF0 };

  // Method 1:
  // Search for devices on the bus and assign based on an index. Ideally,
  // you would do this to initially discover addresses on the bus and then
  // use those addresses and manually assign them (see above) once you know
  // the devices on your bus (and assuming they don't change).
  if (!sensors.getAddress(insideThermometer, 0))
    Serial.println("Unable to find address for Device 0");
     if (!sensors.getAddress(dog, 1))
    Serial.println("Unable to find address for Device 1");

  // method 2: search()
  // search() looks for the next device. Returns 1 if a new address has been
  // returned. A zero might mean that the bus is shorted, there are no devices,
  // or you have already retrieved all of them. It might be a good idea to
  // check the CRC to make sure you didn't get garbage. The order is
  // deterministic. You will always get the same devices in the same order
  //
  // Must be called before search()
  // oneWire.reset_search();
  // assigns the first address found to insideThermometer
  // if (!oneWire.search(insideThermometer)) Serial.println("Unable to find address for insideThermometer");

  // show the addresses we found on the bus
  Serial.print("Device 0 Address: ");
  printAddress(insideThermometer);
  Serial.println();
  Serial.print("Device 1 Address: ");
  printAddress(dog);
  Serial.println();

  // set the resolution to 9 bit (Each Dallas/Maxim device is capable of several different resolutions)
 sensors.setResolution(insideThermometer, 11);

  Serial.print("Device 0 Resolution: ");
  Serial.print(sensors.getResolution(insideThermometer), DEC);
  Serial.println();
    Serial.print("Device 1 Resolution: ");
  Serial.print(sensors.getResolution(dog), DEC);
  Serial.println();

  // locate devices on the bus
}

// function to print the temperature for a device

/*
 * Main function. It will request the tempC from the sensors and display on Serial.
 */

void loop(void)
{
  setMux(random(0,15));
  setMux(random(0,15));
  setMux(random(0,15));
  setMux(random(0,15));
  setMux(random(0,15));
  setMux(random(0,15));
  delay(5);
  setMux(10);
  // call sensors.requestTemperatures() to issue a global temperature
  // request to all devices on the bus
  Serial.print("Requesting temperatures...");
  sensors.requestTemperatures(); // Send the command to get temperatures
  Serial.println("DONE");
  Serial.println("inside:");
  // It responds almost immediately. Let's print out the data
  printTemperatureIndex(0); // Use a simple function to print out the data
  Serial.println("dog:");
  // It responds almost immediately. Let's print out the data
  printTemperatureIndex(1); // Use a simple function to print out the data
  setMux(random(0,15));
  delay(2000);
}
